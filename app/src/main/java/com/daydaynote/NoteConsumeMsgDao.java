package com.daydaynote;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.daydaynote.entity.NoteConsumeMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE_CONSUME_MSG".
*/
public class NoteConsumeMsgDao extends AbstractDao<NoteConsumeMsg, Void> {

    public static final String TABLENAME = "NOTE_CONSUME_MSG";

    /**
     * Properties of entity NoteConsumeMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property NoteTime = new Property(1, String.class, "noteTime", false, "NOTE_TIME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property TypeIcon = new Property(3, Integer.class, "typeIcon", false, "TYPE_ICON");
        public final static Property ConsumeSum = new Property(4, String.class, "consumeSum", false, "CONSUME_SUM");
        public final static Property ConsumeDate = new Property(5, String.class, "consumeDate", false, "CONSUME_DATE");
        public final static Property NoteInfo = new Property(6, String.class, "noteInfo", false, "NOTE_INFO");
        public final static Property NotePicPah = new Property(7, String.class, "notePicPah", false, "NOTE_PIC_PAH");
    }


    public NoteConsumeMsgDao(DaoConfig config) {
        super(config);
    }
    
    public NoteConsumeMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE_CONSUME_MSG\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"NOTE_TIME\" TEXT UNIQUE ," + // 1: noteTime
                "\"TYPE\" TEXT," + // 2: type
                "\"TYPE_ICON\" INTEGER," + // 3: typeIcon
                "\"CONSUME_SUM\" TEXT," + // 4: consumeSum
                "\"CONSUME_DATE\" TEXT," + // 5: consumeDate
                "\"NOTE_INFO\" TEXT," + // 6: noteInfo
                "\"NOTE_PIC_PAH\" TEXT);"); // 7: notePicPah
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE_CONSUME_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoteConsumeMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String noteTime = entity.getNoteTime();
        if (noteTime != null) {
            stmt.bindString(2, noteTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        Integer typeIcon = entity.getTypeIcon();
        if (typeIcon != null) {
            stmt.bindLong(4, typeIcon);
        }
 
        String consumeSum = entity.getConsumeSum();
        if (consumeSum != null) {
            stmt.bindString(5, consumeSum);
        }
 
        String consumeDate = entity.getConsumeDate();
        if (consumeDate != null) {
            stmt.bindString(6, consumeDate);
        }
 
        String noteInfo = entity.getNoteInfo();
        if (noteInfo != null) {
            stmt.bindString(7, noteInfo);
        }
 
        String notePicPah = entity.getNotePicPah();
        if (notePicPah != null) {
            stmt.bindString(8, notePicPah);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoteConsumeMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String noteTime = entity.getNoteTime();
        if (noteTime != null) {
            stmt.bindString(2, noteTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        Integer typeIcon = entity.getTypeIcon();
        if (typeIcon != null) {
            stmt.bindLong(4, typeIcon);
        }
 
        String consumeSum = entity.getConsumeSum();
        if (consumeSum != null) {
            stmt.bindString(5, consumeSum);
        }
 
        String consumeDate = entity.getConsumeDate();
        if (consumeDate != null) {
            stmt.bindString(6, consumeDate);
        }
 
        String noteInfo = entity.getNoteInfo();
        if (noteInfo != null) {
            stmt.bindString(7, noteInfo);
        }
 
        String notePicPah = entity.getNotePicPah();
        if (notePicPah != null) {
            stmt.bindString(8, notePicPah);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public NoteConsumeMsg readEntity(Cursor cursor, int offset) {
        NoteConsumeMsg entity = new NoteConsumeMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noteTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // typeIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // consumeSum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // consumeDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // noteInfo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // notePicPah
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoteConsumeMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoteTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTypeIcon(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setConsumeSum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setConsumeDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNoteInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNotePicPah(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(NoteConsumeMsg entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(NoteConsumeMsg entity) {
        return null;
    }

    @Override
    public boolean hasKey(NoteConsumeMsg entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
